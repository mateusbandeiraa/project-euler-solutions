package dev.bandeira.projecteulersolutions.problem26;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

/*
 * A unit fraction contains 1 in the numerator. The decimal representation of
 * the unit fractions with denominators 2 to 10 are given:
 * 
 * 1/2 = 0.5
 * 1/3 = 0.(3)
 * 1/4 = 0.25
 * 1/5 = 0.2
 * 1/6 = 0.1(6)
 * 1/7 = 0.(142857)
 * 1/8 = 0.125
 * 1/9 = 0.(1)
 * 1/10 = 0.1
 * 
 * Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be
 * seen that 1/7 has a 6-digit recurring cycle.
 * 
 * Find the value of d < 1000 for which 1/d contains the longest recurring cycle
 * in its decimal fraction part.
 * 
 * COMPLETED ON 27/07/18
 */
public class Problem26 {

	public static void main(String[] args) {
		int longest = 3;
		int longestLength = 1;
		String longestValue = "";
		for (int i = longest; i < 1000; i++) {
			String value = recurring(i);
			System.out.println("1 / " + i + " = " + value);
			int length = value.length();
			if (length > longestLength) {
				longest = i;
				longestLength = length;
				longestValue = value;
			}
		}

		System.out.println("The longest recurring cycle is " + longestValue);
		System.out.println("It has " + longestLength + " digits and is generated by");
		System.out.println("1/" + longest);
	}

	public static String recurring(int div) {
		int numerator = 1;
		int result = 0, remainder;
		String output = "";
		LinkedHashMap<Integer, Integer> list = new LinkedHashMap<>();

		remainder = (numerator % div) * 10;

		while (remainder != 0 && !list.containsKey(remainder)) {
			result = remainder / div;
			list.put(remainder, result);
			remainder = remainder % div;
			remainder *= 10;
		}

		List<Integer> decimals = new ArrayList<Integer>(list.values());
		List<Integer> remainders = new ArrayList<Integer>(list.keySet());

		for (int i = remainders.indexOf(remainder); (i < decimals.size()) && i >= 0; i++) {
			output += decimals.get(i);
		}

		return output;
	}
}
